[{"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\index.js":"1","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\App.js":"2","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx":"4","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\employee-service.js":"5","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\config\\config.js":"6","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\axios-service.js":"7","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\display\\display.jsx":"8","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\home\\home.jsx":"9","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\utility-service.js":"10"},{"size":517,"mtime":1625209970982,"results":"11","hashOfConfig":"12"},{"size":792,"mtime":1625643651488,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1625209970987,"results":"14","hashOfConfig":"12"},{"size":20733,"mtime":1625643502663,"results":"15","hashOfConfig":"12"},{"size":576,"mtime":1625643592462,"results":"16","hashOfConfig":"12"},{"size":240,"mtime":1625560168275,"results":"17","hashOfConfig":"12"},{"size":748,"mtime":1625639501175,"results":"18","hashOfConfig":"12"},{"size":2846,"mtime":1625643237431,"results":"19","hashOfConfig":"12"},{"size":3151,"mtime":1625643360795,"results":"20","hashOfConfig":"12"},{"size":289,"mtime":1625643620427,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1qnqu41",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\index.js",[],["44","45"],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\App.js",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx",["46","47","48","49","50","51","52"],"import React, { useState, useEffect } from 'react';\r\nimport UtilityService from '../../services/utility-service';\r\nimport profile1 from '../../assets/profile-images/Ellipse -3.png';\r\nimport profile2 from '../../assets/profile-images/Ellipse -4.png';\r\nimport profile3 from '../../assets/profile-images/Ellipse -5.png';\r\nimport profile4 from '../../assets/profile-images/Ellipse -7.png';\r\nimport profile5 from '../../assets/profile-images/Ellipse -2.png';\r\nimport profile6 from '../../assets/profile-images/Ellipse -1.png';\r\nimport './payroll-form.css';\r\nimport logo from '../../assets/images/logo.png';\r\nimport { useParams, Link, withRouter} from 'react-router-dom';\r\nimport EmployeeService from '../../services/employee-service';\r\n\r\nconst initialState = {\r\n  name: '',\r\n  profilePicture: '',\r\n  gender: '',\r\n  allDepartments: ['HR', 'Sales', 'Finance', 'Engineer', 'Others'],\r\n  departments: [],    \r\n  salary: 40000,\r\n  day: '1',\r\n  month: 'Jan',\r\n  year: '2020',\r\n  startDate: new Date(\"1 Jan 2020\"),\r\n  note: '',\r\n\r\n  id: '',      \r\n  isUpdate: false,\r\n  isError: false,\r\n\r\n  error: {\r\n    department: '',\r\n    name: '',\r\n    gender: '',\r\n    profilePicture: '',\r\n    startDate: ''    \r\n  },  \r\n  valid: {\r\n    department: '',\r\n    name: '',\r\n    gender: '',\r\n    profilePicture: '',\r\n    startDate: ''\r\n  }\r\n}\r\n\r\nclass PayrollForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: '',\r\n      profilePicture: '',\r\n      gender: '',\r\n      allDepartments: ['HR', 'Sales', 'Finance', 'Engineer', 'Others'],\r\n      departments: [],    \r\n      salary: 40000,\r\n      day: '1',\r\n      month: 'Jan',\r\n      year: '2020',\r\n      startDate: new Date(\"1 Jan 2020\"),\r\n      note: '',\r\n\r\n      id: '',      \r\n      isUpdate: false,\r\n      isError: false,\r\n\r\n      error: {\r\n        department: '',\r\n        name: '',\r\n        gender: '',\r\n        profilePicture: '',\r\n        startDate: ''    \r\n      },  \r\n      valid: {\r\n        department: '',\r\n        name: '',\r\n        gender: '',\r\n        profilePicture: '',\r\n        startDate: ''\r\n      }\r\n    }\r\n    this.nameChangeHandler = this.nameChangeHandler.bind(this);\r\n    this.profileChangeHandler = this.profileChangeHandler.bind(this);\r\n    this.genderChangeHandler = this.genderChangeHandler.bind(this);\r\n    this.departmentChangeHandler = this.departmentChangeHandler.bind(this);\r\n    this.salaryChangeHandler = this.salaryChangeHandler.bind(this);\r\n    this.dayChangeHandler = this.dayChangeHandler.bind(this);\r\n    this.monthChangeHandler = this.monthChangeHandler.bind(this);\r\n    this.yearChangeHandler = this.yearChangeHandler.bind(this);\r\n    this.noteChangeHandler = this.noteChangeHandler.bind(this);\r\n  }  \r\n\r\n  componentDidMount = () => {\r\n    let id = this.props.match.params.id;\r\n    if(id !== undefined && id!=='') {\r\n      this.getEmployeeById(id);\r\n    }\r\n  }\r\n\r\n  getEmployeeById = (id) => {\r\n    new EmployeeService().getEmployeeById(id)\r\n    .then(responseData => {\r\n      this.setEmployeeData(responseData.data);\r\n    }).catch(error => {\r\n      console.log(\"Error while fetching employee data by ID :\\n\" + JSON.stringify(error));\r\n    })\r\n  }\r\n  setEmployeeData = (employee) => {\r\n    let dateArray = new UtilityService().stringifyDate(employee.startDate).split(\" \");\r\n    let employeeDay = (dateArray[0].length === 1) ? '0' + dateArray[0] : dateArray[0];\r\n    this.setState({\r\n      id: employee.id,\r\n      name: employee.name,\r\n      profilePicture: employee.profilePicture,\r\n      gender: employee.gender,\r\n      departments: employee.departments,\r\n      salary: employee.salary,      \r\n      day: employeeDay,      \r\n      month: dateArray[1],      \r\n      year: dateArray[2],\r\n      note: employee.note,\r\n      isUpdate: true\r\n    });\r\n  }\r\n  \r\n  nameChangeHandler = (event) => {\r\n    this.setState({name: event.target.value});\r\n    this.checkName(event.target.value);\r\n  }\r\n  profileChangeHandler = (event) => {\r\n    this.setState({profilePicture: event.target.value});\r\n    this.checkProfilePicture(event.target.value);\r\n  }\r\n  genderChangeHandler = (event) => {\r\n    this.setState({gender: event.target.value});\r\n    this.checkGender(event.target.value);\r\n  }\r\n  departmentChangeHandler = async (event) => {\r\n    {if(event.target.checked) {\r\n      await this.setState({departments: this.state.departments.concat(event.target.value)});\r\n    }\r\n    if (!event.target.checked) {\r\n      let index = 0;\r\n      let array = this.state.departments;\r\n      for (let i = 0; i < array.length; i++) {\r\n          if (array[i] === event.target.value) {\r\n              index = i;\r\n          }\r\n      }\r\n      array.splice(index, 1);\r\n      await this.setState({ departments: array });\r\n    }}\r\n    this.checkDepartment(this.state.departments);\r\n  }\r\n  salaryChangeHandler = (event) => {\r\n    this.setState({salary: event.target.value});    \r\n  }\r\n  dayChangeHandler = (event) => {\r\n    this.setState({day: event.target.value});\r\n    this.setStartDate(event.target.value, this.state.month, this.state.year);\r\n  }\r\n  monthChangeHandler = (event) => {\r\n    this.setState({month: event.target.value});\r\n    this.setStartDate(this.state.day, event.target.value, this.state.year);\r\n  }\r\n  yearChangeHandler = (event) => {\r\n    this.setState({year: event.target.value});\r\n    this.setStartDate(this.state.day, this.state.month, event.target.value);\r\n  }\r\n  noteChangeHandler = (event) => {\r\n    this.setState({note: event.target.value});\r\n  }\r\n  \r\n  setStartDate = (day, month, year) => {\r\n    let startDateValue = new Date(`${day} ${month} ${year}`);\r\n    this.setState({startDate: startDateValue});\r\n    this.checkStartDate(startDateValue);\r\n  }\r\n\r\n  initializeMessage = (field, errorMessage, validMessage) => {\r\n    this.setState(previousState => ({\r\n      error: {\r\n        ...previousState.error,\r\n        [field]: errorMessage\r\n      }\r\n    }));\r\n    this.setState(previousState => ({\r\n      valid: {\r\n        ...previousState.valid,\r\n        [field]: validMessage\r\n      }\r\n    }));\r\n  }\r\n  checkName = (nameValue) => {\r\n    if(nameValue.length === 0) {\r\n      this.initializeMessage('name', '', '');\r\n    } else {\r\n      const NAME_REGEX = RegExp(\"^[A-Z]{1}[a-z]{2,}([ ][A-Z]{1}[a-z]{2,})?$\");\r\n      if(NAME_REGEX.test(nameValue)) {\r\n        this.initializeMessage('name', '', 'âœ“');\r\n      } else {\r\n        this.initializeMessage('name', 'Name is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkProfilePicture = (profilePictureValue) => {\r\n    if(profilePictureValue.length === 0) {\r\n      this.initializeMessage('profilePicture', 'Profile Picture cannot be Blank!', '');\r\n    } else {\r\n      this.initializeMessage('profilePicture', '', 'âœ“');\r\n    }\r\n  }\r\n  checkStartDate = (startDateValue) => {\r\n    let now = new Date();\r\n    let difference = Math.abs(now.getTime() - startDateValue.getTime());\r\n    if (startDateValue > now) {\r\n      this.initializeMessage('startDate', 'Start Date is a Futute Date!', '');\r\n    // } else if (difference / (1000 * 60 * 60 * 24) > 30) {\r\n    //     this.initializeMessage('startDate', 'Start Date is beyond 30 days!', '');\r\n    } else {\r\n      this.initializeMessage('startDate', '', 'âœ“');\r\n    }\r\n  }\r\n  checkDepartment = (departmentsValue) => {\r\n    if(departmentsValue.length === 0) {\r\n      this.initializeMessage('department', 'Employee must belong to atleast one Department!', '');\r\n    } else {\r\n      this.initializeMessage('department', '', 'âœ“');\r\n    }\r\n  }\r\n  getChecked = (name) => {\r\n    return this.state.departments.includes(name);\r\n  }\r\n  checkGender = (genderValue) => {\r\n    if(genderValue.length === 0) {\r\n      this.initializeMessage('gender', 'Gender is a Required Field!', '');\r\n    } else {\r\n      this.initializeMessage('gender', '', 'âœ“');\r\n    }\r\n  }\r\n  checkGlobalError = () =>{\r\n    if(this.state.error.name.length === 0 && this.state.error.department.length === 0 && this.state.error.gender.length === 0 \r\n      && this.state.error.profilePicture.length === 0 && this.state.error.startDate.length === 0) {\r\n        this.setState({isError: false});\r\n      } else {\r\n        this.setState({isError: true});\r\n      }\r\n  }\r\n\r\n  checkValidations = async () => {\r\n    await this.checkName(this.state.name);\r\n    await this.checkProfilePicture(this.state.profilePicture);\r\n    await this.checkStartDate(this.state.startDate);\r\n    await this.checkDepartment(this.state.departments);\r\n    await this.checkGender(this.state.gender);\r\n    await this.checkGlobalError();\r\n    return (this.state.isError);\r\n  }\r\n  save =  async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    saveOperation: {         \r\n      if(await this.checkValidations()) {\r\n        let errorLog = JSON.stringify(this.state.error);\r\n        alert(\"Error Occured while Submitting the Form ==> ERROR LOG : \" + errorLog);\r\n        break saveOperation;\r\n      }\r\n      let employeeObject = {\r\n        id: this.state.id,\r\n        name: this.state.name,\r\n        profilePicture: this.state.profilePicture,\r\n        gender: this.state.gender,\r\n        departments: this.state.departments,\r\n        salary: this.state.salary,\r\n        startDate: this.state.startDate,\r\n        note: this.state.note\r\n      }\r\n      if(this.state.isUpdate) {\r\n        new EmployeeService().updateEmployee(employeeObject)\r\n        .then(responseText => {\r\n          alert(\"Employee Updated Successfully!!!\\n\" + JSON.stringify(responseText.data));\r\n          this.reset();\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          console.log(\"Error while updating Employee!!!\\n\" + JSON.stringify(error));\r\n        })\r\n      } else {\r\n        new EmployeeService().addEmployee(employeeObject)\r\n        .then(responseText => {\r\n          alert(\"Employee Added Successfully!!!\\n\" + JSON.stringify(responseText.data));\r\n          this.reset();\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          console.log(\"Error while adding Employee!!!\\n\" + JSON.stringify(error));\r\n        })\r\n      }\r\n      this.reset();\r\n    }\r\n  }\r\n  reset = () => {\r\n    this.setState({...initialState});\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"body\">\r\n        <header className=\"headerContainer header\">\r\n          <div className=\"logoContainer\">\r\n            <img src={logo} alt=\"\" />\r\n            <div>\r\n              <span className=\"emp-text\">EMPLOYEE</span><br />\r\n              <span className=\"emp-text emp-payroll\">PAYROLL</span>\r\n            </div>\r\n          </div>\r\n        </header>\r\n        <div className=\"form-content\">\r\n          <form className=\"form\" action=\"#\" onSubmit={this.save} onReset={this.reset}>\r\n            <div className=\"form-head\">Employee Payroll form</div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"name\">Name</label>\r\n              <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.nameChangeHandler} placeholder=\"Your name..\" required />\r\n              <valid-message className=\"valid-name\" htmlFor=\"name\">{this.state.valid.name}</valid-message>\r\n              <error-output className=\"name-error\" htmlFor=\"name\">{this.state.error.name}</error-output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"profilePicture\">Profile Image</label>\r\n              <div className=\"profile-radio-content\">\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile1\" name=\"profilePicture\" value=\"../../assets/profile-images/Ellipse -3.png\" \r\n                    checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -3.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image1\" src={profile1} alt=\"\" />\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile2\" name=\"profilePicture\" value=\"../../assets/profile-images/Ellipse -4.png\" \r\n                    checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -4.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image2\" src={profile2} alt=\"\" />\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile3\" name=\"profilePicture\" value=\"../../assets/profile-images/Ellipse -5.png\" \r\n                    checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -5.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image3\" src={profile3} alt=\"\" />\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile4\" name=\"profilePicture\" value=\"../../assets/profile-images/Ellipse -7.png\" \r\n                   checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -7.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image4\" src={profile4} alt=\"\" />\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile5\" name=\"profilePicture\" value=\"../../assets/profile-images/Ellipse -2.png\" \r\n                    checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -2.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image5\" src={profile5} alt=\"\" />\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"profile6\" name=\"profile\" value=\"../../assets/profile-images/Ellipse -1.png\" \r\n                    checked={this.state.profilePicture === '../../assets/profile-images/Ellipse -1.png'} onChange={this.profileChangeHandler} />\r\n                  <img className=\"profile\" id=\"image6\" src={profile6} alt=\"\" />\r\n                </label>\r\n              </div>\r\n              <valid-message className=\"valid-profile\" htmlFor=\"profilePicture\">{this.state.valid.profilePicture}</valid-message>\r\n              <error-output className=\"profile-error\" htmlFor=\"profilePicture\">{this.state.error.profilePicture}</error-output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"gender\">Gender</label>\r\n              <div>\r\n                <label>\r\n                  <input type=\"radio\" id=\"male\" checked={this.state.gender === 'male'} onChange={this.genderChangeHandler} name=\"gender\" value=\"male\"  />\r\n                  <label className=\"text\" htmlFor=\"male\">Male</label>\r\n                </label>\r\n                <label>\r\n                  <input type=\"radio\" id=\"female\" checked={this.state.gender === 'female'} onChange={this.genderChangeHandler} name=\"gender\" value=\"female\"  />\r\n                  <label className=\"text\" htmlFor=\"female\">Female</label>\r\n                </label>\r\n              </div>\r\n              <valid-message className=\"valid-gender\" htmlFor=\"gender\">{this.state.valid.gender}</valid-message>\r\n              <error-output className=\"gender-error\" htmlFor=\"gender\">{this.state.error.gender}</error-output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"department\">Department</label>\r\n              <div>\r\n                {this.state.allDepartments.map(item => (\r\n                  <span key={item}>\r\n                    <label>\r\n                      <input className=\"checkbox\" type=\"checkbox\" onChange={this.departmentChangeHandler} name={item}\r\n                          checked={this.getChecked(item)} value={item} />\r\n                      <label className=\"text\" htmlFor={item}>{item}</label>\r\n                    </label>\r\n                  </span>\r\n                ))}\r\n              </div>\r\n              <valid-message className=\"valid-department\" htmlFor=\"department\">{this.state.valid.department}</valid-message>\r\n              <error-output className=\"department-error\" htmlFor=\"department\">{this.state.error.department}</error-output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"salary\">Salary</label>\r\n              <input className=\"input\" type=\"range\" name=\"salary\" id=\"salary\" onChange={this.salaryChangeHandler}\r\n                min=\"30000\" max=\"50000\" step=\"100\" value={this.state.salary} />\r\n              <output className=\"salary-output text\" htmlFor=\"salary\">{this.state.salary}</output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\r\n              <div name=\"startdate\" id=\"startDate\">\r\n                <select onChange={this.dayChangeHandler} value={this.state.day} id=\"day\" name=\"day\">\r\n                  <option value=\"01\">1</option>\r\n                  <option value=\"02\">2</option>\r\n                  <option value=\"03\">3</option>\r\n                  <option value=\"04\">4</option>\r\n                  <option value=\"05\">5</option>\r\n                  <option value=\"06\">6</option>\r\n                  <option value=\"07\">7</option>\r\n                  <option value=\"08\">8</option>\r\n                  <option value=\"09\">9</option>\r\n                  <option value=\"10\">10</option>\r\n                  <option value=\"11\">11</option>\r\n                  <option value=\"12\">12</option>\r\n                  <option value=\"13\">13</option>\r\n                  <option value=\"14\">14</option>\r\n                  <option value=\"15\">15</option>\r\n                  <option value=\"16\">16</option>\r\n                  <option value=\"17\">17</option>\r\n                  <option value=\"18\">18</option>\r\n                  <option value=\"19\">19</option>\r\n                  <option value=\"20\">20</option>\r\n                  <option value=\"21\">21</option>\r\n                  <option value=\"22\">22</option>\r\n                  <option value=\"23\">23</option>\r\n                  <option value=\"24\">24</option>\r\n                  <option value=\"25\">25</option>\r\n                  <option value=\"26\">26</option>\r\n                  <option value=\"27\">27</option>\r\n                  <option value=\"28\">28</option>\r\n                  <option value=\"29\">29</option>\r\n                  <option value=\"30\">30</option>\r\n                  <option value=\"31\">31</option>\r\n                </select>\r\n                <select onChange={this.monthChangeHandler} value={this.state.month} id=\"month\" name=\"month\">\r\n                  <option value=\"Jan\">January</option>\r\n                  <option value=\"Feb\">February</option>\r\n                  <option value=\"Mar\">March</option>\r\n                  <option value=\"Apr\">April</option>\r\n                  <option value=\"May\">May</option>\r\n                  <option value=\"Jun\">June</option>\r\n                  <option value=\"July\">July</option>\r\n                  <option value=\"Aug\">August</option>\r\n                  <option value=\"Sep\">September</option>\r\n                  <option value=\"Oct\">October</option>\r\n                  <option value=\"Nov\">November</option>\r\n                  <option value=\"Dec\">December</option>\r\n                </select>\r\n                <select onChange={this.yearChangeHandler} value={this.state.year} id=\"year\" name=\"year\">\r\n                <option value=\"2021\">2021</option>\r\n                  <option value=\"2020\">2020</option>\r\n                  <option value=\"2019\">2019</option>\r\n                  <option value=\"2018\">2018</option>\r\n                  <option value=\"2017\">2017</option>\r\n                  <option value=\"2016\">2016</option>\r\n                </select>\r\n              </div>\r\n              <valid-message className=\"valid-startDate\" htmlFor=\"startDate\">{this.state.valid.startDate}</valid-message>\r\n              <error-output className=\"startDate-error\" htmlFor=\"startDate\">{this.state.error.startDate}</error-output>\r\n            </div>\r\n            <div className=\"row-content\">\r\n              <label className=\"label text\" htmlFor=\"note\">Notes</label>\r\n              <textarea className=\"input\" onChange={this.noteChangeHandler} value={this.state.note} id=\"note\" name=\"note\" placeholder=\"Write a note...\" style={{height:'100px', margin: '25px 0 0 0'}}></textarea>\r\n            </div>\r\n            <div className=\"buttonParent\">\r\n              <Link to='' className=\"resetButton button cancelButton\">Cancel</Link>\r\n              <div className=\"submit-reset\">\r\n                <button className=\"button submitButton\" type=\"submit\" id=\"submitButton\">{this.state.isUpdate? 'Update' : 'Submit'}</button>\r\n                <button className=\"resetButton button\" type=\"reset\">Reset</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(PayrollForm);","C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\employee-service.js",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\config\\config.js",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\axios-service.js",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\display\\display.jsx",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\components\\home\\home.jsx",[],"C:\\Users\\User\\Documents\\React\\employee-payroll\\src\\services\\utility-service.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":25},{"ruleId":"57","severity":1,"message":"61","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"62","line":11,"column":10,"nodeType":"59","messageId":"60","endLine":11,"endColumn":19},{"ruleId":"63","severity":1,"message":"64","line":139,"column":5,"nodeType":"65","messageId":"66","endLine":152,"endColumn":7},{"ruleId":"57","severity":1,"message":"67","line":215,"column":9,"nodeType":"59","messageId":"60","endLine":215,"endColumn":19},{"ruleId":"68","severity":1,"message":"69","line":262,"column":5,"nodeType":"70","messageId":"71","endLine":298,"endColumn":6},{"ruleId":"68","severity":1,"message":"72","line":266,"column":9,"nodeType":"73","messageId":"74","endLine":266,"endColumn":29},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useParams' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'difference' is assigned a value but never used.","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","Unexpected label in break statement.","BreakStatement","unexpectedLabelInBreak","no-global-assign","no-unsafe-negation"]